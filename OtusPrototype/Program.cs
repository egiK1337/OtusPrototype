namespace OtusPrototype
{
    public class Program
    {
        //0. Иерархия классов
        //Базовый класс: Bicycle
        //Универсальный класс, представляющий велосипед с общими свойствами,
        //такими как brand, model и gearCount.

        //Производный класс: MountainBike
        //Наследуется от Bicycle. Представляет горный велосипед с дополнительными
        //функциями, такими как suspensionType.

        //Производный класс: RoadBike
        //Наследуется от Bicycle. Представляет дорожный велосипед с
        //дополнительными функциями, такими как tireWidth.

        //Производный класс: HybridBike
        //Наследуется от Bicycle. Представляет электрический велосипед,
        //объединяющий функции горного и дорожного велосипедов.


        public static void Main()
        {
            //3. Тестирование функции клонирования
            //Создал небольшую тестовую програмку для проверки

            //4. Реализация интерфейса ICloneable
            //я уже реализовал интерфейс ICloneable в  базовом классе,
            //который использует метод Clone, определенный в IMyCloneable. Каждый производный класс
            //соответствующим образом переопределяет этот метод.

            //Создание горного велосипеда
            MountainBike mtb = new MountainBike("Trek", "Marlin 7", 18, "Full");

            //Клонирование горного велосипеда
            MountainBike clonedMTB = (MountainBike)mtb.Clone();

            //Вывод исходных и клонированных свойств
            Console.WriteLine($"Original: {mtb.Brand}, {mtb.Model}, {mtb.GearCount}, {mtb.SuspensionType}");
            Console.WriteLine($"Cloned: {clonedMTB.Brand}, {clonedMTB.Model}, {clonedMTB.GearCount}, {clonedMTB.SuspensionType}");

            // 5. Заключение: Преимущества и недостатки

            //IMyCloneable:
            // Преимущества:
            // Типобезопасное клонирование; позволяет указать тип клонированного объекта.
            // Гибкость для изменения или расширения с помощью различных типов без изменения существующего кода.
            // Недостатки:
            // Требует больше шаблонного кода (универсальная реализация) по сравнению с использованием встроенных интерфейсов.

            //ICloneable:
            // Преимущества:
            // Стандартный интерфейс, поддерживаемый .NET, что упрощает его использование с другими компонентами .NET.
            //Более простая реализация для базовых потребностей клонирования.

            //Недостатки:
            //Не типобезопасен; требует приведения, что может привести к ошибкам во время выполнения.
            //Менее гибок для расширений или модификаций, поскольку тип объекта не может быть принудительно применен во время компиляции.
            //В заключение следует сказать, что оба интерфейса служат своей цели, но выбор между ними зависит
            //от конкретных потребностей в типобезопасности и интеграции с фреймворками .NET.
        }
    }
}
